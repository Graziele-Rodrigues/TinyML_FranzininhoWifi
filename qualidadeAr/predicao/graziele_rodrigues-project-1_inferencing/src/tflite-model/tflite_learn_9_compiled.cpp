/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 08.09.2024 16:16:11

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1520;
#else
constexpr int kTensorArenaSize = 496;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,150 } };
const TfArray<1, float> quant0_scale = { 1, { 10663.1962890625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { 0, 0, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const TfArray<1, float> quant1_scale = { 1, { 51.137527465820312, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[2*10] = { 
  75, -102, 74, 110, 127, -82, -45, -108, 12, 92, 
  72, 12, -23, -24, -99, 0, -121, 55, -99, 36, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 2,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0054326858371496201, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 37.336704254150391, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[10*20] = { 
  44, -84, -73, 13, 106, 16, 122, -113, -7, -56, 25, 19, 67, 122, 58, -90, -1, -28, -76, 26, 
  -61, -127, 73, 68, 54, -48, -56, -104, -104, 15, -56, -61, 64, 24, 75, 92, -58, 37, -48, -33, 
  -24, -104, -3, 113, -52, -64, -38, 22, -44, -12, 35, 55, -23, -93, -14, -75, 91, -105, -108, -87, 
  63, 16, 101, 6, -70, 84, -63, -49, -27, 80, 107, 53, -76, -101, -5, -47, -25, -58, 114, 90, 
  -49, 64, -104, -46, -92, 75, -39, 29, -99, 66, 97, 61, -22, 53, 27, -103, -53, 108, 78, 62, 
  -94, 76, -75, 55, -33, -126, -7, 84, -125, -51, 84, 64, -55, 67, -26, -73, -40, 67, -73, 4, 
  99, 53, -63, -82, 88, 86, 12, -36, -25, 4, 67, 45, -74, -43, 10, -17, 68, -19, -17, -37, 
  -16, 96, 50, 64, -14, 92, 94, -119, 119, -33, -63, 120, 68, -30, -108, 52, 89, 6, 15, 90, 
  67, 45, 59, 46, 96, 37, -117, -28, -28, 14, 102, 25, -2, -112, -37, 104, -90, 76, -51, -35, 
  47, -75, -17, 0, 88, 110, -21, 12, 87, -99, -65, 54, -77, -57, 60, -19, -16, 95, 3, 83, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0035551951732486486, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[20] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension5 = { 1, { 20 } };
const TfArray<1, float> quant5_scale = { 1, { 22.37995719909668, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[20*150] = { 
  0, -12, -20, 73, 25, 43, 25, -57, 29, -71, -3, 32, -78, -57, -19, 78, 22, 64, -43, -42, 76, -23, 73, 16, -81, 56, -43, -43, -61, -79, 21, 27, 53, -73, -83, 38, -55, 63, -8, -57, 39, -8, -66, -27, -76, 72, -31, 77, -58, -63, -16, -82, 35, -19, -74, 56, 83, 66, 87, 52, 33, -35, 9, -62, -14, -62, 1, 28, 74, -11, 21, -75, -54, -23, -19, -48, 61, 41, -12, 72, 24, -3, -15, 27, -18, 11, -89, -10, -67, -83, 30, -21, -45, 74, -10, -84, 84, 46, -67, -35, -6, -89, 17, 45, -24, -36, -34, 3, -49, -42, 69, 25, 3, 56, -45, 81, -40, 29, -88, 27, 40, 1, 19, 81, -88, -16, 55, 4, 70, -13, -76, -52, 81, 24, 71, -47, 4, 85, -22, 3, 43, -2, -59, -55, -34, -18, -20, 42, -52, -46, 
  -89, -36, 40, 9, -56, -17, 25, -4, 7, 79, -87, 5, 9, -14, 22, -50, 38, 12, 87, -83, -46, -11, 42, -48, 42, 12, -47, 61, -52, -96, -16, 52, 44, 83, 30, -59, -73, -39, -9, -42, -67, -80, 83, 31, 19, -26, 35, -93, 5, -30, -112, -13, -27, -65, -14, -120, -115, 68, 43, -102, -18, 30, -67, -18, -52, -31, 64, -118, 17, -26, 49, -82, 50, -36, -19, 70, -58, -81, -8, 48, -43, -91, -76, -32, 38, -24, -49, -67, -14, -53, 25, -3, 48, 18, -26, 18, -44, -103, -17, -81, -11, 52, -3, -43, -93, 39, 34, -88, -19, -46, -57, -80, 57, -5, -27, 47, -9, 15, -96, -93, 20, -113, -59, -48, 10, -39, -5, 3, -105, 80, -61, -57, 53, -57, 51, 51, -86, -60, -16, 25, -116, 10, -39, -71, 1, 24, 23, 40, -65, -83, 
  57, -12, -76, -63, 38, -46, 54, 74, 84, -8, -67, 14, -64, 43, -52, 61, 29, 52, 1, 38, 88, -82, 49, -69, 11, -22, 84, 44, -46, -69, -45, 58, 45, -64, -17, -29, -76, -6, 51, -67, 45, 46, -82, -15, 32, -17, -46, -71, 31, -23, 45, -20, -16, -2, 46, -72, 9, 12, 10, -24, 81, -30, -14, 15, -24, 51, 18, -50, -27, -30, -5, -86, 6, 75, -15, -76, -75, 48, -43, -53, 37, -48, 32, -3, 8, 15, -22, -1, -70, 0, -62, 74, 20, -31, 88, 60, 28, 44, 31, 26, -85, -76, -45, -63, 40, -35, 78, 63, 8, -15, -42, 46, 7, -70, -55, -73, 42, 89, -20, 38, -45, 71, 89, -85, 78, 74, 23, 58, -74, -5, 50, -54, 17, 43, 44, 43, -43, 65, 52, 31, -13, 77, 81, 80, -72, 1, -74, 9, -31, 11, 
  -76, 14, -81, 50, -40, 17, -11, 53, 10, -77, 39, 37, 40, 22, 4, -22, -100, -77, 27, 23, -92, 34, -90, -67, 51, 12, -97, 50, 41, 23, -42, 4, 40, -42, 21, -23, 84, -117, -17, 58, -105, 20, -1, 36, 50, -71, -36, -90, 50, 8, -92, -5, -50, -123, 18, -100, -110, -89, -68, -44, 77, -2, 49, 61, -91, -114, 48, -109, -90, -83, 18, -80, -50, -96, -15, 28, -54, 55, 29, 53, -16, 54, 29, -61, -19, -104, -42, -37, 21, -70, 33, -3, -107, 8, 40, -68, -55, -50, 35, -24, -61, -42, 68, -84, -76, -8, -22, -58, 13, -8, -108, 11, -36, 30, 3, 47, -114, 1, 29, -39, -85, 38, -31, 25, -107, -30, -3, -86, -12, 26, -66, -114, -26, 44, -51, -46, -91, -15, 5, 28, 20, 56, -10, -68, 13, -13, -71, -63, -62, -100, 
  77, 57, 54, -51, -32, -27, 79, 17, -2, 57, 13, 56, -51, -1, -21, 52, 90, 98, -3, 18, 30, 86, 21, 26, -24, 42, 104, 64, -43, -31, 45, -19, 118, -59, 10, -4, -23, -43, 59, 56, 47, 66, -73, 7, 89, -51, 103, 93, -13, 98, 96, 69, -30, 17, -20, 123, 96, 73, 116, 91, -71, -33, 120, 86, 43, 89, -34, 126, -47, -17, -38, 63, 65, 69, 76, 46, 9, 15, -38, 4, 105, -80, 83, -23, 34, -12, 58, -59, 97, 8, -29, 42, 62, 62, 64, 42, 21, 19, -26, -65, 19, -38, 25, 13, 119, -42, -45, 18, -55, 67, -17, 0, -14, 36, 37, 30, 6, -56, -9, 29, 84, 14, -12, -6, -37, 45, 87, -30, -1, 40, 11, 24, 40, 23, 19, -16, 84, 85, -77, 101, 67, 18, 95, 49, 64, -46, 107, 20, -37, -38, 
  -25, 98, 49, -2, 2, -36, 10, 120, -1, 21, -51, 2, -86, 73, 49, 0, -48, 59, -26, 39, -35, -71, 23, -10, 67, 9, 58, -11, -10, 121, -15, 23, 102, -52, 52, -49, 62, -19, 70, 79, 93, 68, -59, 8, 49, -85, -34, -25, -1, 88, 112, -11, 61, -2, 41, 85, 64, -9, 82, 40, 25, -52, 92, -68, 8, 33, -31, 102, 110, 42, 114, -6, 62, -33, -54, -55, 21, 20, 58, 32, -35, 35, -12, 104, -6, -36, 60, -4, 119, 18, 12, 38, -21, 70, 36, 26, -9, 61, 32, 56, 20, 61, 73, -19, 53, 16, 118, -25, 32, 80, 25, -6, 58, 85, 64, 49, 77, -67, 56, -21, -86, 81, -35, 15, 36, 116, -13, -2, -9, -78, 39, 63, -54, 1, 51, 79, 71, -35, 70, 114, 82, 0, 32, -16, 15, -18, 112, 83, 109, -8, 
  43, -25, -32, -48, -55, -87, -29, 63, -31, 7, -3, -7, 1, 52, 35, -14, -36, -45, 87, 69, -42, 17, -40, 57, -35, -9, 89, -73, 72, 23, 59, -82, 1, -11, -69, 52, -80, 36, -71, 89, -9, 19, -7, 4, -44, -76, 86, -48, -9, -19, -58, 73, -76, 54, 29, -10, 8, 74, 48, -32, -55, 9, 63, -54, 42, 23, -80, 56, -66, -48, 15, 79, -26, 41, 26, 53, 41, 70, 39, -39, 66, 54, 4, 26, -51, -26, 55, 23, -41, -38, -63, 55, -35, 81, -28, -85, -41, -53, -79, -8, -53, -51, 4, -25, 85, -14, -12, -60, -48, -4, -4, 47, 58, -88, 22, -20, 49, -35, -75, -31, -47, 19, -73, 0, -33, -72, -8, 38, -25, -74, 38, -83, -8, 42, 59, 70, -72, 39, 62, 88, 34, 52, -35, -89, -65, 9, 62, -78, 69, 56, 
  65, -87, 25, 75, 77, 25, 24, 36, -29, 74, -19, 85, -32, 34, -58, -85, -30, -48, -60, 82, 73, -57, -47, -2, -20, 85, -25, 24, -84, -13, 19, 82, 19, -78, -32, -83, -16, 24, 60, -30, -16, 25, 89, 85, 31, -9, 18, -75, -53, 43, -61, -24, -17, 14, -28, -56, -77, 61, 58, -88, -60, -29, 45, -65, 47, 24, 21, -37, -41, 89, -54, 15, -17, 36, -2, 15, -33, 50, -46, 43, 88, -88, 52, -4, 22, -84, 37, 39, 59, -31, -23, -76, 12, -50, -73, -39, -30, -76, 4, 81, -28, 52, -4, -78, -12, -31, -40, -78, 82, -32, -51, -72, 15, 40, 75, -37, 66, -15, -34, 34, -29, 23, -9, -74, 33, 33, -60, -74, -17, -15, 51, -6, -19, 14, -60, 53, -18, -20, 6, -8, -12, 51, 51, 71, 32, 54, -4, -66, 58, 18, 
  47, 51, 17, -17, -110, 19, -12, -86, -43, -16, -28, 18, 50, -66, -22, -40, 3, -77, 86, -16, 45, 58, 45, 0, 53, 23, 27, -10, 39, -113, 48, -118, -49, -3, -107, -61, -79, 41, -95, 7, -79, -82, -82, -68, -114, 24, -65, -47, -48, -7, -118, -88, 54, -92, 44, 8, -24, 40, -43, -69, 55, -54, 39, -37, -29, -120, 75, 30, 19, -47, -71, -63, 13, -105, -63, -81, -98, -76, -51, 41, -80, -53, -103, -77, 73, -15, -40, 30, 17, 12, -2, -114, -116, -22, 34, -42, 79, -13, 3, -51, -95, -90, -42, 5, -26, 62, -56, -26, 21, -42, -76, 57, -18, 4, 67, 48, -7, -57, 39, -59, 60, 37, -32, -28, 12, -118, 14, 53, -116, 65, -114, 33, -91, -59, -98, -4, -98, 42, 20, 41, 39, -6, 27, -84, -74, -22, 1, -63, -114, -88, 
  -73, 73, -40, -4, -18, 88, -79, 33, -13, -88, -43, -26, -88, 10, -21, 71, 24, 87, 64, -23, 17, 58, 50, 118, 91, 93, 40, 28, 31, 75, -38, 8, -30, -1, 96, 62, 62, 100, 22, 15, 53, 72, -47, 55, -2, -87, 91, 72, 78, -36, 81, 86, -52, -49, -51, 49, 85, 11, -48, 62, -78, -16, -26, 69, 34, 14, -82, 8, -26, 39, -23, 94, 78, 35, 19, -66, 115, 10, -87, 94, 80, 87, -42, -15, -62, 101, -26, -46, 76, 51, 72, 67, 10, -9, 43, 116, -1, -49, -33, -38, 88, -33, -75, 1, 48, -3, -56, -5, 37, 66, 77, -47, -4, -4, 77, 91, 105, 51, 92, 79, 72, -54, -8, 78, -16, 75, 65, 4, -9, 37, -8, -16, -31, 8, -40, 42, 111, 33, 16, -54, 104, -59, 66, 31, 11, 65, 116, -6, -55, 27, 
  85, 21, 40, -85, -70, -36, 52, 14, -5, 29, -67, 27, 24, -69, 42, -52, -2, -1, 31, 19, -75, 41, -81, 69, 73, -16, -42, -28, 63, 60, -85, -70, -70, -19, 89, 78, -25, -69, -69, 25, 34, -11, 4, -28, -29, 61, 6, -84, 52, 34, -28, -55, -17, -6, 63, 78, -58, -38, 20, -14, 23, 30, 57, 60, 22, -86, -80, 39, 40, 25, 69, 10, -20, -36, -1, 79, 24, -56, 40, 88, -37, -61, 27, -60, -38, 59, -31, 23, -34, -45, -2, 83, 41, -47, -13, 5, -49, 31, -79, 42, 74, 54, 41, 37, 43, -41, 2, -80, 67, 7, -21, 3, 30, 42, -85, 12, -26, 75, -33, -51, -44, -74, -53, -67, 73, 42, -65, 19, 41, -80, 57, -37, -68, -83, 27, 27, -11, -80, 80, 52, -36, -65, -41, 24, -16, -85, -9, -33, 36, -37, 
  -15, 10, 58, -30, -88, -100, 86, -55, 44, -23, 56, 61, 54, 61, -54, 38, -57, -52, 77, -18, -41, -22, 65, -18, 25, 15, 35, 41, 70, 13, -10, -39, -17, -39, 4, -41, -64, 2, 2, 45, 19, 43, 74, -34, -68, -30, 0, 20, -79, -28, -87, 57, 7, 9, 79, 31, 24, -19, -10, -92, 65, 28, -23, -27, 43, 32, 55, -42, -39, -23, -88, -18, -53, -73, 50, 22, 19, 50, 36, -5, 19, 78, -94, -68, -86, -99, -78, 39, -31, 36, 41, -90, -107, -69, -3, 5, 36, 39, -36, -27, -31, -27, 64, 42, 34, 31, -11, 66, -3, -95, -39, 16, 16, 7, -83, -78, -103, 4, 36, 10, 85, 59, -15, -20, -26, -45, -50, -87, 68, 63, -74, 32, 34, -38, -99, 16, -86, 46, -46, 30, -28, 9, -33, 17, 55, -100, -19, -38, -81, -66, 
  -43, -122, -37, -31, 17, -115, -56, -123, -110, 40, -57, -121, 19, 10, -69, 63, -26, -68, 71, -61, 3, 47, -92, 17, 42, -65, -32, -45, 37, -62, -40, -16, -124, 77, 18, 17, 69, -95, -113, -58, -48, -25, -74, -80, -127, -38, 45, 12, -16, 51, 21, -81, -126, -22, -61, -124, -98, 24, -54, 0, -32, -101, -106, 56, -23, -16, 56, -3, -31, 58, -37, -80, 38, 20, -14, -90, -72, 29, -79, -113, -24, 36, 38, 18, 80, 31, -120, -54, -33, 16, -66, 43, -21, 12, -98, -119, 29, -28, 19, -23, -97, 14, 40, -9, -41, -77, -43, 32, 42, -23, -43, -32, -34, -82, -62, -23, -81, -32, 42, 8, 48, -46, -8, -50, -8, -3, -91, 11, -87, 72, -43, 9, 69, -43, -11, 79, 11, -43, 66, 52, 17, 16, 34, -61, -37, -62, -125, 59, -65, -127, 
  20, -91, -50, -6, 78, 85, -76, 81, -14, 19, 15, 22, 77, 22, -19, -65, -91, -16, -73, -34, -70, -72, -6, -30, -39, -90, -61, 75, -16, 5, 26, -88, -68, -87, -14, 20, 39, -8, 70, -29, 81, 42, 71, -66, 73, -45, -6, 49, 87, 52, 27, 40, -67, -44, 79, -36, 14, 60, 43, -17, -1, -32, -16, -70, 57, 67, 70, 68, 16, 83, -75, -18, 55, -18, 40, -66, -49, -42, 40, -53, -38, 38, -28, -32, 47, 12, 63, 74, -6, -89, 5, 17, -62, 46, -86, -65, -40, 82, -1, -46, 14, 76, 20, -67, -56, 36, -1, -10, -26, 36, 55, -82, -55, 25, -60, 46, 47, -52, 49, -79, -5, -35, -42, -31, 78, 14, -72, 67, 31, 74, -75, -71, 22, -4, -75, -83, 37, -34, -43, 71, 74, -14, 47, -88, -27, 59, 38, -49, 47, 81, 
  81, -75, -48, 17, 6, -53, -40, 30, 42, 29, 85, -88, -76, 86, -87, -34, -79, 11, 50, -70, 74, 86, -45, 64, -84, -53, -13, -73, 69, -25, 89, -48, -41, 54, -14, -59, -71, 20, 70, -82, -89, 72, -85, 57, -14, 54, -33, -57, -86, -38, -18, 39, 28, -16, -67, -58, 80, -22, 76, -51, 5, 37, -54, 80, 12, 80, 76, 55, -16, 47, 9, -55, 80, -36, 76, 42, -38, 22, -3, 7, 47, 9, -60, -42, 16, -71, 67, 7, -74, 17, -40, 27, -14, 50, -76, -3, 68, 69, 71, 89, -82, 81, -58, 65, -74, -32, 55, -79, -35, -52, -40, -2, 85, 47, -81, 54, 87, -76, 67, 73, -46, -12, -10, -53, -62, -70, -6, 84, 80, -59, -31, -54, -4, -3, 60, 46, 81, 41, -75, 71, -29, 33, -29, -45, 62, 59, 32, -55, 51, 64, 
  -2, 52, -90, -85, -106, 0, -13, -8, 8, 28, -28, 10, -51, 19, 17, 67, -8, 15, 29, 30, -106, 72, -95, 15, 18, -22, -64, -34, -40, -73, 21, -54, -56, 45, -30, -5, -2, -105, -2, 77, 28, -67, 24, -86, 38, -57, -103, -47, -67, 38, 13, -9, 40, 51, 34, -73, 53, 37, -87, 50, 0, -78, -8, -40, -9, 12, 12, -76, -17, 55, -99, 48, 70, 54, 12, 62, -60, -4, 73, 10, -87, -54, -11, 59, 87, 45, -16, 44, 28, 64, -5, 65, -6, 54, 62, 38, -75, 21, 23, 39, 44, 53, 83, -50, 36, -58, -9, 11, 86, -74, 2, -77, -110, -9, 50, -79, -54, -79, -26, -34, -49, -5, -36, -34, 10, -45, -54, -65, -49, -68, -39, -51, 16, 52, -83, -38, -71, -51, 9, -10, -71, 24, -60, -30, 71, -8, 60, 8, -29, -93, 
  -1, -93, -73, -8, 36, -59, -32, -100, -6, -80, -114, -66, 19, 7, -69, 30, -106, -82, 37, -65, -113, -53, -3, -76, 35, -65, -54, 66, -98, 26, 30, -37, 31, -55, -63, -85, 24, -112, -78, 1, -37, -53, 13, 28, -48, -73, 33, -120, -9, -71, -31, -13, -53, -103, -14, -121, -51, -20, 21, -100, -59, 40, -90, 3, -99, 2, -1, -69, -40, 82, -109, -56, -48, 40, 28, 45, -78, -14, -55, -19, -19, 77, -125, -67, -8, 23, -34, -57, 47, -59, 9, 50, 44, 13, -22, -81, 6, -64, 40, -43, -49, -50, -17, -49, 40, 61, 6, 45, -17, -88, 11, 20, 25, -121, -83, -6, -63, 77, -87, -113, 41, -49, -92, -12, 47, -21, -11, -115, 42, 77, -52, 33, -15, -17, -99, 0, 23, -101, 81, -116, 35, -23, 15, -74, -48, -7, 45, 52, -40, -25, 
  -17, 44, 79, 63, 65, -27, -35, 74, 31, -12, -31, 86, -31, 63, -64, -30, -62, 23, 82, -48, 47, -38, -66, 87, -48, -69, -45, 29, -6, -51, -12, -67, 3, 22, 8, 87, 84, -48, 62, -75, -84, -26, 89, -27, 27, -59, 8, 84, -67, 43, -41, -51, 82, 47, 26, -66, 66, -78, -19, -42, 27, -69, 43, 84, -18, 47, -10, 2, 29, -25, 68, -32, 57, 81, 41, 22, -72, -66, 65, -69, -72, -81, -78, 15, 46, 83, -34, 20, 20, 39, -1, 86, -82, -45, 64, 46, 38, -31, 79, -81, 77, 36, 7, -54, -51, -89, -71, 83, 24, -88, -80, -41, 69, 3, -61, 26, 61, 87, -44, -13, -54, 81, 23, 78, 2, 38, 41, 75, 83, 77, 46, 39, -54, 69, 6, -18, 84, 53, 19, -19, -88, -81, -82, 62, 46, -2, 25, 37, 75, -5, 
  -75, -23, 47, -87, 43, 8, -58, -8, -3, -31, -82, -34, -76, -63, -66, -46, 6, -53, -49, 34, -44, 74, -48, 70, -39, -78, -4, -25, -79, -62, 41, -39, -56, -80, 88, 70, 25, -60, -69, -30, -65, 18, -53, 46, 2, -14, 89, 20, -70, -82, 5, -76, 40, -51, 56, -63, -58, -56, -24, 64, -28, -47, -59, 70, 44, -46, 78, -72, 5, 78, 55, 48, 67, -41, -84, 27, 80, 16, -26, 31, 25, 37, 77, -3, 43, 16, 75, 9, -5, -71, -85, 70, 56, -29, -64, -65, 49, 20, 84, -54, -89, 88, 21, 8, -44, 2, -46, -64, 5, 50, -61, 10, -88, -47, -50, -67, 40, 36, -77, -79, 77, -49, -24, 16, 25, 85, -19, -37, 5, 7, -78, -40, 3, -5, -13, -48, 23, 86, -37, 27, 62, -27, -13, -37, 74, 66, 22, 28, -15, -22, 
  -3, 67, 5, -44, -15, -29, 26, -12, 64, 60, -72, 70, 61, -1, -1, -36, -2, -74, -47, 24, -34, -82, 70, -70, -6, 2, -58, -37, 31, 70, -62, 13, 75, -55, 8, 31, -81, 19, 5, -11, -58, -62, 23, 50, 1, -72, -83, 24, -9, 3, 23, 41, -75, 30, 41, -46, 47, -74, -60, 74, -69, 60, -65, 31, -67, -10, -14, -60, -64, -53, -85, 59, -26, -12, -19, 30, -74, -87, -78, -39, 68, -6, -3, -76, -18, 32, 78, -9, 26, 1, -83, 14, -60, -19, 26, -73, -59, -63, 89, -53, -28, 68, 60, -68, -16, 56, -84, -62, -6, 53, 89, 67, -75, -56, 39, 11, -8, -50, -40, -6, 88, 12, 38, -44, 25, 58, -80, 0, -46, 1, -63, 1, 71, 50, 11, 87, 42, 70, -47, -36, 34, -57, 31, 24, 1, 69, -63, 69, -19, 34, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 20,150 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0020988038741052151, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 10502.0126953125, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 9412.9365234375, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,2 } };
const TfArray<1, float> quant9_scale = { 1, { 5360.025390625, } };
const TfArray<1, int> quant9_zero = { 1, { 87 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,2 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 150, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 3000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 160), (TfLiteIntArray*)&g0::tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_9_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
