/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 02.10.2024 13:44:57

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1440;
#else
constexpr int kTensorArenaSize = 416;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,78 } };
const TfArray<1, float> quant0_scale = { 1, { 0.20505897700786591, } };
const TfArray<1, int> quant0_zero = { 1, { -95 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -3, 3, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00040137799805961549, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[2*10] = { 
  72, -111, 72, 113, 127, -83, -46, -111, 14, 94, 
  74, 22, -22, -27, -99, 1, -119, 58, -101, 34, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 2,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0054555358365178108, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[10] = { -34, 132, -34, 36, -37, 106, -29, 52, 6, 21, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00027086350019089878, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[10*20] = { 
  45, -83, -74, 16, 104, 15, 119, -111, -5, -56, 25, 19, 69, 123, 56, -90, 2, -27, -76, 29, 
  -59, -105, 81, 78, 63, -40, -48, -109, -91, 22, -55, -49, 73, 24, 76, 106, -51, 44, -47, -37, 
  -23, -107, -6, 110, -53, -62, -40, 23, -45, -12, 33, 52, -25, -91, -16, -77, 91, -106, -106, -86, 
  71, 15, 99, 7, -68, 86, -67, -41, -28, 78, 108, 51, -76, -107, -6, -56, -28, -55, 114, 96, 
  -43, 65, -110, -44, -90, 73, -45, 35, -96, 64, 96, 60, -19, 45, 23, -112, -52, 109, 78, 68, 
  -102, 79, -74, 52, -40, -114, -2, 82, -127, -50, 83, 65, -57, 72, -23, -61, -32, 64, -67, -1, 
  107, 51, -68, -82, 85, 85, 5, -29, -27, 1, 66, 41, -74, -52, 7, -30, 65, -17, -16, -31, 
  -21, 98, 54, 63, -11, 93, 100, -124, 120, -30, -63, 123, 69, -19, -104, 64, 93, 5, 14, 84, 
  86, 44, 57, 47, 95, 41, -122, -16, -29, 12, 103, 22, -3, -116, -35, 92, -83, 79, -45, -29, 
  57, -75, -17, 2, 87, 110, -27, 23, 85, -101, -63, 50, -78, -62, 61, -25, -18, 97, 4, 89, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0035782388877123594, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[20] = { 76, 75, 61, 11, 15, 14, 23, -10, 27, 11, -33, 24, -8, 13, -27, 49, -39, -44, 7, 8, };
const TfArray<1, int> tensor_dimension5 = { 1, { 20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00045640641474165022, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[20*78] = { 
  14, -32, -31, 100, 26, 63, 38, -67, 39, -90, -4, 38, -99, -51, -35, 87, 48, 99, -33, -61, 83, -49, 74, -2, -117, 50, -44, -79, -91, -73, 55, 53, 69, -91, -114, 44, -83, 71, -20, -49, 47, -17, -64, -16, -71, 94, -41, 77, -88, -99, -34, -123, 46, -28, -102, 85, 115, 87, 100, 49, 28, -60, -6, -95, -29, -73, 9, 31, 100, -25, 25, -97, -60, -34, -44, -81, 55, 37, 
  -99, -17, 89, 29, -26, 28, 43, 39, 51, 102, -73, 44, 11, 35, 79, -64, 102, 72, 119, -70, -31, -25, 79, -35, 43, 42, -12, 74, -23, -66, -11, 111, 102, 109, 77, -33, -89, -12, 28, -35, -44, -61, 124, 94, 74, -22, 78, -77, 2, -11, -107, -14, 14, -41, -1, -97, -104, 99, 103, -79, -12, 73, -50, -24, -35, 13, 75, -115, 76, -16, 111, -50, 76, 2, 26, 97, -32, -60, 
  83, -13, -84, -68, 47, -46, 79, 102, 116, -1, -77, 23, -77, 60, -54, 84, 40, 63, -14, 41, 104, -106, 53, -91, 4, -32, 116, 69, -40, -92, -79, 74, 68, -72, -13, -32, -87, -5, 66, -77, 59, 64, -92, -10, 31, -18, -55, -87, 34, -30, 50, -26, -6, 9, 71, -78, 13, 30, 27, -15, 113, -27, -5, 26, -31, 78, 11, -58, -21, -28, 10, -92, 20, 105, -4, -84, -80, 66, 
  -95, 47, -60, 71, -17, 64, -11, 108, 54, -94, 87, 85, 46, 74, 46, -24, -79, -44, 42, 76, -66, 50, -64, -36, 68, 59, -79, 56, 90, 77, -56, 46, 93, -48, 69, 15, 106, -108, 19, 80, -92, 64, 6, 97, 111, -79, 1, -64, 71, 57, -67, 2, -12, -119, 25, -75, -96, -98, -34, -2, 108, 46, 112, 88, -66, -88, 58, -96, -63, -92, 74, -47, -50, -67, 36, 48, -17, 121, 
  94, 28, 12, -66, -80, -80, 94, -25, -48, 69, -30, 21, -65, -50, -91, 58, 70, 79, -12, -37, -25, 86, -32, -29, -41, 2, 77, 68, -96, -81, 58, -71, 96, -82, -38, -53, -36, -106, 23, 65, 23, 37, -88, -25, 64, -71, 73, 52, -31, 61, 64, 82, -87, -20, -31, 111, 82, 83, 93, 59, -96, -87, 99, 96, 0, 59, -55, 110, -99, -17, -99, 28, 74, 33, 44, 48, -43, -31, 
  -17, 76, 14, 2, -30, -76, 16, 114, -40, 23, -99, -35, -103, 66, 9, -11, -89, 43, -14, 12, -87, -98, -14, -65, 79, -36, 44, -36, -69, 127, 1, 10, 82, -69, 18, -104, 64, -64, 39, 114, 76, 34, -70, -26, 42, -100, -81, -81, -7, 61, 95, -24, 34, -57, 37, 69, 40, -9, 57, -1, 21, -111, 65, -91, -30, -4, -30, 83, 94, 41, 98, -56, 76, -82, -123, -86, -25, -27, 
  54, -39, -43, -53, -81, -103, -31, 83, -36, 12, -3, -9, 0, 69, 58, -8, -51, -70, 109, 98, -42, 32, -36, 84, -39, -2, 116, -93, 89, 24, 55, -98, 11, -5, -77, 72, -92, 50, -82, 112, -19, 28, -7, 4, -53, -87, 116, -47, 2, -11, -63, 104, -85, 72, 48, -5, 6, 102, 73, -27, -57, 23, 90, -57, 62, 40, -103, 73, -73, -47, 30, 109, -23, 61, 44, 80, 65, 101, 
  80, -96, 24, 94, 99, 31, 28, 44, -37, 90, -27, 104, -43, 50, -79, -121, -24, -43, -58, 109, 93, -74, -61, -9, -24, 101, -38, 29, -117, -5, 40, 106, 20, -100, -47, -106, -29, 25, 67, -27, -20, 23, 115, 113, 55, -1, 27, -97, -66, 47, -75, -35, -29, 11, -47, -73, -97, 72, 66, -115, -77, -41, 50, -83, 57, 22, 32, -55, -55, 99, -74, 14, -26, 39, -13, 7, -51, 53, 
  63, 98, 62, -11, -107, 73, -8, -61, -5, -14, 10, 68, 63, -32, 32, -40, 46, -55, 120, 36, 113, 86, 108, 56, 73, 79, 84, -15, 89, -90, 47, -98, -9, 5, -84, -25, -91, 96, -70, 18, -70, -49, -95, -40, -85, 44, -24, -1, -45, 45, -91, -96, 118, -62, 66, 61, 16, 62, -1, -31, 82, -15, 103, -34, 16, -95, 91, 77, 73, -57, -36, -22, 27, -78, -23, -87, -68, -37, 
  -89, 51, -99, -8, -69, 67, -99, -1, -61, -113, -95, -76, -112, -24, -70, 85, -10, 65, 82, -70, -23, 69, 19, 99, 110, 75, 10, 26, -4, 52, -47, -24, -79, -1, 77, 31, 70, 82, -16, 21, 24, 44, -57, 26, -40, -109, 73, 45, 92, -91, 56, 105, -105, -108, -70, 21, 62, 16, -98, 35, -97, -59, -77, 83, 1, -24, -102, -35, -74, 40, -68, 76, 98, 5, -20, -87, 99, -33, 
  106, 33, 54, -117, -82, -47, 61, 14, -10, 36, -81, 37, 36, -92, 41, -70, -8, -6, 38, 17, -100, 45, -106, 79, 92, -24, -58, -32, 79, 70, -91, -90, -94, -30, 104, 93, -36, -88, -88, 25, 48, -20, -2, -45, -43, 67, -3, -115, 57, 34, -40, -80, -30, -12, 68, 86, -80, -56, 15, -28, 18, 30, 62, 65, 22, -116, -91, 49, 40, 18, 76, 2, -31, -54, -11, 87, 19, -80, 
  -13, 35, 103, -32, -80, -93, 114, -39, 82, -23, 96, 104, 72, 107, -37, 46, -42, -36, 98, -2, -33, -26, 104, -4, 22, 34, 73, 60, 115, 48, 1, -18, 9, -43, 32, -25, -78, 29, 33, 61, 46, 72, 101, -8, -62, -43, 12, 47, -99, -19, -95, 63, 40, 24, 94, 70, 60, -14, 18, -86, 80, 58, -8, -36, 79, 74, 74, -27, -14, -14, -78, 8, -56, -62, 94, 27, 46, 84, 
  -43, -111, -3, -31, 53, -85, -56, -98, -81, 64, -16, -93, 29, 66, -29, 83, 12, -29, 103, -16, 64, 74, -56, 83, 69, -22, 13, -59, 89, -25, -57, 30, -98, 107, 79, 77, 96, -65, -90, -62, -13, 21, -93, -42, -100, -30, 115, 76, -4, 123, 87, -82, -100, 9, -71, -99, -65, 45, -8, 59, -24, -67, -71, 86, 28, 37, 74, 44, 12, 86, 10, -40, 59, 81, 43, -97, -29, 99, 
  8, -100, -47, -8, 90, 90, -110, 86, -34, 7, 0, 9, 75, 21, -13, -71, -111, -18, -113, -51, -87, -81, -9, -35, -57, -113, -83, 119, 0, -7, 10, -125, -88, -101, -13, 12, 43, -17, 82, -45, 98, 54, 88, -77, 73, -65, -14, 65, 105, 67, 27, 47, -82, -43, 112, -35, 17, 74, 58, -11, 6, -44, -24, -83, 66, 88, 82, 85, 26, 116, -92, -19, 61, -15, 58, -75, -60, -61, 
  98, -85, -58, 12, 13, -69, -53, 35, 50, 32, 104, -109, -95, 103, -118, -53, -98, 20, 70, -88, 93, 103, -59, 71, -105, -69, -22, -88, 85, -33, 123, -62, -56, 63, -23, -78, -95, 20, 82, -102, -105, 82, -113, 61, -12, 68, -42, -76, -112, -55, -26, 41, 27, -23, -94, -81, 94, -35, 88, -71, -1, 39, -73, 94, 11, 90, 101, 66, -30, 42, 2, -76, 93, -53, 84, 40, -56, 16, 
  7, 89, -70, -99, -114, 40, -2, 29, 47, 43, -6, 41, -59, 54, 66, 100, 12, 35, 20, 71, -99, 97, -85, 56, 21, 6, -37, -21, -3, -75, 7, -33, -24, 71, 6, 36, 13, -95, 41, 95, 62, -37, 37, -80, 63, -67, -97, -17, -74, 82, 45, 0, 92, 101, 57, -56, 86, 61, -62, 111, 19, -52, 36, -36, 30, 59, 3, -50, 19, 76, -81, 106, 100, 106, 63, 96, -34, 35, 
  -5, -61, -36, -12, 94, -30, -33, -76, 45, -87, -91, -30, 31, 39, -52, 38, -97, -63, 30, -39, -93, -56, 48, -35, 52, -26, -34, 102, -60, 66, 24, -21, 88, -67, -26, -54, 45, -90, -40, -11, 8, -10, 13, 81, -33, -97, 81, -94, -3, -34, 14, -2, -24, -77, -9, -108, -6, -29, 73, -71, -67, 104, -56, 12, -76, 48, -14, -37, -2, 120, -90, -20, -62, 92, 98, 74, -38, 42, 
  -20, 61, 102, 69, 91, -31, -42, 94, 42, -12, -32, 119, -29, 80, -88, -53, -75, 38, 119, -56, 63, -46, -79, 105, -53, -84, -58, 36, -9, -61, 4, -78, 1, 25, 6, 108, 101, -54, 80, -89, -105, -50, 104, -36, 45, -70, 11, 103, -82, 52, -49, -68, 93, 50, 17, -92, 88, -104, -34, -63, 25, -93, 47, 103, -23, 49, 0, -5, 24, -46, 77, -50, 64, 95, 41, 15, -98, -91, 
  -86, -29, 47, -107, 50, 22, -67, -3, -1, -41, -104, -42, -92, -68, -93, -62, 8, -68, -46, 50, -52, 91, -59, 85, -46, -98, 6, -48, -111, -69, 62, -30, -65, -96, 108, 89, 27, -73, -85, -27, -67, 20, -67, 51, 21, -9, 113, 24, -86, -105, 9, -95, 54, -78, 60, -82, -84, -56, -21, 86, -30, -54, -72, 88, 61, -55, 104, -97, 6, 93, 78, 65, 93, -45, -110, 27, 92, 13, 
  7, 89, 14, -62, -6, -24, 44, -3, 90, 85, -80, 98, 88, -3, -17, -43, -6, -103, -59, 26, -45, -105, 84, -92, -7, 2, -62, -46, 46, 78, -74, 26, 102, -62, 18, 46, -93, 33, 16, -18, -59, -88, 27, 54, -2, -95, -113, 23, -16, -2, 26, 47, -97, 26, 40, -62, 52, -92, -72, 95, -87, 74, -81, 40, -82, -20, -21, -87, -81, -73, -111, 67, -32, -17, -33, 26, -101, -119, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 20,78 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0022257324308156967, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.075697429478168488, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.073572605848312378, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,2 } };
const TfArray<1, float> quant9_scale = { 1, { 0.05315287783741951, } };
const TfArray<1, int> quant9_zero = { 1, { 44 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,2 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 78, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80), (TfLiteIntArray*)&g0::tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_10_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
